{"ast":null,"code":"var _jsxFileName = \"/home/ingrid_amalie/project-3/frontend/src/containers/BookDetails.tsx\";\nimport React, { useState } from \"react\";\nimport { MdClose } from \"react-icons/md\";\nimport store from \"../redux/store\";\nimport { useSelector } from \"react-redux\";\nimport \"../styles/BookDetails.css\";\n/**\n * BookDetail is a component that will show the details of a chosen book.\n * @var bookDetailsClassName is used to choose if details of a book is shown.\n * @var phonePage uses redux store to decide if the component should be shown.\n */\n\nconst BookDetails = () => {\n  const [bookDetailsClassName, setBookDetailsClassName] = useState(\"closed-book\");\n  const phonePage = useSelector(state => state.phonePage.phonePage); // remember to remove this after retrieving data from db\n\n  let title = \"The Spice Shelf Girls\";\n  let author = \"Xu Wang\";\n  let cover = \"../../sunset.jpg\";\n  let genres = [\"Drama\", \"Documentary\"];\n  store.subscribe(() => displayDetailedView());\n\n  const displayDetailedView = () => {\n    setBookDetailsClassName(\"opened-book\"); // if id !== 0 => get data for book with id 'props.id' and display this\n\n    console.log(store.getState()); // to show that another book cover is clicked\n  };\n\n  const notImplemented = () => {\n    alert(\"Not yet implemented :(\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: bookDetailsClassName + \" \" + phonePage,\n    id: \"book-details\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"close-button\",\n    onClick: () => setBookDetailsClassName(\"closed-book\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MdClose, {\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"img\", {\n    src: cover,\n    alt: \"SOME book cover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"Title: \", title), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Author: \", author), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"genre\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Genres:\", genres.map(genre => {\n    return /*#__PURE__*/React.createElement(\"b\", {\n      key: genre,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 18\n      }\n    }, \" \", genre);\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"favorite-button\",\n    className: \"red-button\",\n    onClick: notImplemented,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Favorite\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"wish-to-read-button\",\n    className: \"red-button\",\n    onClick: notImplemented,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"Wish to read\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"have-read-button\",\n    className: \"red-button\",\n    onClick: notImplemented,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"Have read\"));\n};\n\nexport default BookDetails;","map":{"version":3,"sources":["/home/ingrid_amalie/project-3/frontend/src/containers/BookDetails.tsx"],"names":["React","useState","MdClose","store","useSelector","BookDetails","bookDetailsClassName","setBookDetailsClassName","phonePage","state","title","author","cover","genres","subscribe","displayDetailedView","console","log","getState","notImplemented","alert","map","genre"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,2BAAP;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDN,QAAQ,CAC9D,aAD8D,CAAhE;AAGA,QAAMO,SAAc,GAAGJ,WAAW,CAAEK,KAAD,IAAgBA,KAAK,CAACD,SAAN,CAAgBA,SAAjC,CAAlC,CAJwB,CAKxB;;AACA,MAAIE,KAAa,GAAG,uBAApB;AACA,MAAIC,MAAc,GAAG,SAArB;AACA,MAAIC,KAAa,GAAG,kBAApB;AACA,MAAIC,MAAqB,GAAG,CAAC,OAAD,EAAU,aAAV,CAA5B;AAEAV,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAMC,mBAAmB,EAAzC;;AAEA,QAAMA,mBAAmB,GAAG,MAAM;AAChCR,IAAAA,uBAAuB,CAAC,aAAD,CAAvB,CADgC,CAEhC;;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACe,QAAN,EAAZ,EAHgC,CAGD;AAChC,GAJD;;AAMA,QAAMC,cAAc,GAAG,MAAM;AAC3BC,IAAAA,KAAK,CAAC,wBAAD,CAAL;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAEd,oBAAoB,GAAG,GAAvB,GAA6BE,SAA7C;AAAwD,IAAA,EAAE,EAAC,cAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,OAAO,EAAE,MAAMD,uBAAuB,CAAC,aAAD,CAFxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,eAOE;AAAK,IAAA,GAAG,EAAEK,KAAV;AAAiB,IAAA,GAAG,EAAC,iBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAQE;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA6BF,KAA7B,CARF,eASE;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA+BC,MAA/B,CATF,eAUE;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEGE,MAAM,CAACQ,GAAP,CAAYC,KAAD,IAAW;AACrB,wBAAO;AAAG,MAAA,GAAG,EAAEA,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAiBA,KAAjB,CAAP;AACD,GAFA,CAFH,CAVF,eAiBE;AACE,IAAA,EAAE,EAAC,iBADL;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,OAAO,EAAEH,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAwBE;AACE,IAAA,EAAE,EAAC,qBADL;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,OAAO,EAAEA,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAxBF,eA+BE;AACE,IAAA,EAAE,EAAC,kBADL;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,OAAO,EAAEA,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA/BF,CADF;AAyCD,CAhED;;AAkEA,eAAed,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { MdClose } from \"react-icons/md\";\nimport store from \"../redux/store\";\nimport { useSelector } from \"react-redux\";\nimport \"../styles/BookDetails.css\";\n\n/**\n * BookDetail is a component that will show the details of a chosen book.\n * @var bookDetailsClassName is used to choose if details of a book is shown.\n * @var phonePage uses redux store to decide if the component should be shown.\n */\n\nconst BookDetails = () => {\n  const [bookDetailsClassName, setBookDetailsClassName] = useState<string>(\n    \"closed-book\"\n  );\n  const phonePage: any = useSelector((state: any) => state.phonePage.phonePage);\n  // remember to remove this after retrieving data from db\n  let title: string = \"The Spice Shelf Girls\";\n  let author: string = \"Xu Wang\";\n  let cover: string = \"../../sunset.jpg\";\n  let genres: Array<string> = [\"Drama\", \"Documentary\"];\n\n  store.subscribe(() => displayDetailedView());\n\n  const displayDetailedView = () => {\n    setBookDetailsClassName(\"opened-book\");\n    // if id !== 0 => get data for book with id 'props.id' and display this\n    console.log(store.getState()); // to show that another book cover is clicked\n  };\n\n  const notImplemented = () => {\n    alert(\"Not yet implemented :(\");\n  };\n\n  return (\n    <div className={bookDetailsClassName + \" \" + phonePage} id=\"book-details\">\n      <button\n        className=\"close-button\"\n        onClick={() => setBookDetailsClassName(\"closed-book\")}\n      >\n        <MdClose size=\"20px\" />\n      </button>\n      <img src={cover} alt=\"SOME book cover\" />\n      <p className=\"title\">Title: {title}</p>\n      <p className=\"author\">Author: {author}</p>\n      <p className=\"genre\">\n        Genres:\n        {genres.map((genre) => {\n          return <b key={genre}> {genre}</b>;\n        })}\n      </p>\n\n      <button\n        id=\"favorite-button\"\n        className=\"red-button\"\n        onClick={notImplemented}\n      >\n        Favorite\n      </button>\n      <button\n        id=\"wish-to-read-button\"\n        className=\"red-button\"\n        onClick={notImplemented}\n      >\n        Wish to read\n      </button>\n      <button\n        id=\"have-read-button\"\n        className=\"red-button\"\n        onClick={notImplemented}\n      >\n        Have read\n      </button>\n    </div>\n  );\n};\n\nexport default BookDetails;\n"]},"metadata":{},"sourceType":"module"}